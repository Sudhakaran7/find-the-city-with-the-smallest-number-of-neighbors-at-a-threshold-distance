There are n cities numbered from 0 to n-1. Given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities 
from i and to i, and given the integer distanceThreshold.
Return the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold, 
If there are multiple such cities, return the city with the greatest number.
Notice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.
For example, the inputs are N=4, n=4, threshold=4,
edges=
0 1 3
1 2 1
1 3 4
2 3 1
The output is 3
https://assets.leetcode.com/uploads/2020/01/16/find_the_city_01.png
The figure above describes the graph. 
The neighboring cities at a distanceThreshold = 4 for each city are:
City 0 -> [City 1, City 2] 
City 1 -> [City 0, City 2, City 3] 
City 2 -> [City 0, City 1, City 3] 
City 3 -> [City 1, City 2] 
Cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.

Input Description:
First line contains, N, n, threshold as integers as input.(1<N,n,threshold<100).
Rest line contains, N size of edge matrix as Nx3 as integers.

Output Description:
Print the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold.

Sample Input:
4 4 4
0 1 3
1 2 1
1 3 4
2 3 1

Sample Output:
3

Explanation:
See the question for better explanation.

Sample Input:
3 4 2
0 1 1
1 2 1
2 3 1

Sample Output:
3

Sample Input:
4 5 3
1 3 2
3 4 1
0 1 1
3 2 1

Sample Output:
0

Sample Input:
2 5 2
1 2 3
4 3 2

Sample Output:
2

Sample Input:
3 6 4
2 3 1
4 5 2
1 1 1

Sample Output:
1

Sample Input:
5 9 5
2 3 6
7 6 1
5 8 8
4 3 2
1 5 6

Sample Input:
8
